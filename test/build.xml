<?xml version="1.0"?>
<!--***********************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 ***********************************************************-->



<project basedir="." default="test">
	<property file="build.properties" />
	<property environment="env" />

	<property name="env.INPATH" value="output"/>
	<property name="classes" value="${env.INPATH}/class" />
	<property name="dist" value="${env.INPATH}/dist" />

	<property name="env.TESTSPACE" value="testspace" />
	<property name="env.JUNIT_HOME" value="${env.INPATH}/junit" />
	<property name="junit.home" value="${env.JUNIT_HOME}" />
	<property name="testspace" value="${env.TESTSPACE}" />
	<property name="test.classes" value="testsuite/gui/BVT.class" />
	<property name="test.output" value="${testspace}/output" />
	<property name="test.result" value="${test.output}/result" />
	<property name="test.report" value="${test.output}/report" />
	<property name="junit.style.dir" value="reportstyle" />

	<path id="junit.classpath">
		<fileset dir="${junit.home}" erroronmissingdir="false">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="testcommon.init">
		<mkdir dir="${classes}" />
		<copy includeemptydirs="false" todir="${classes}">
			<fileset dir="testcommon/source">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="testcommon.compile" depends="testcommon.init">
		<javac destdir="${classes}" debug="on" source="1.6" includeantruntime="false">
			<src path="testcommon/source"/>
		</javac>
	</target>

	<target name="testgui.init">
		<mkdir dir="${classes}" />
		<copy includeemptydirs="false" todir="${classes}">
			<fileset dir="testgui/source">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${classes}">
			<fileset dir="testgui/data">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="testgui.compile" depends="testgui.init, prepare.junit">
		<javac destdir="${classes}" debug="on" source="1.6" includeantruntime="false">
			<src path="testgui/source"/>
			<src path="testgui/data"/>
			<classpath>
				<pathelement location="${classes}" />
				<path refid="junit.classpath"/>
			</classpath>
		</javac>
	</target>

	<target name="testuno.init">
		<mkdir dir="${classes}" />
		<copy includeemptydirs="false" todir="${classes}">
			<fileset dir="testuno/source">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="testuno.compile" depends="testuno.init, prepare.junit">
		<path id="uno.classpath">
			<fileset dir="${openoffice.home}" erroronmissingdir="false">
				<include name="**/juh.jar" />
				<include name="**/unoil.jar" />
				<include name="**/ridl.jar" />
				<include name="**/jurt.jar" />
			</fileset>
		</path>
		<javac destdir="${classes}" debug="on" source="1.6" includeantruntime="false">
			<src path="testuno/source"/>
			<classpath>
				<pathelement location="${classes}" />
				<path refid="junit.classpath"/>
				<path refid="uno.classpath"/>
			</classpath>
		</javac>
	</target>

	<target name="clean" description="Clean all output">
		<delete dir="${env.INPATH}" />
	</target>

	<target name="check.junit">
		<available file="junit.jar" property="junit.jar.exists">
			<filepath refid="junit.classpath" />
		</available>
	</target>

	<target name="prepare.junit" depends="check.junit" unless="junit.jar.exists">
		<property name="junit.jar.repos" value="http://repo1.maven.org/maven2/junit/junit/4.10/junit-4.10.jar" />
		<mkdir dir="${junit.home}" />
		<get src="${junit.jar.repos}" dest="${junit.home}/junit.jar" skipexisting="true" />
	</target>

	<target name="compile" depends="testcommon.init, testcommon.compile, testgui.init, testgui.compile, testuno.init, testuno.compile" description="Compile source code">
	</target>

	<target name="dist" depends="compile">
		<tstamp />
		<property name="dist.archive" value="aoo_test_${DSTAMP}.zip" />
	</target>

	<target name="check.build" description="Check the build context">
		<condition property="openoffice.archive.dir" value="${env.SRC_ROOT}/instsetoo_native/${env.INPATH}/OpenOffice/archive/install/en-US">
			<isset property="env.SRC_ROOT" />
		</condition>
		<condition property="openoffice.build" value="localbuild">
			<isset property="openoffice.archive.dir" />
		</condition>
		<condition property="find.build.skip">
			<or>
				<isset property="openoffice.build" />
				<isset property="openoffice.archive.url" />
				<isset property="openoffice.archive.dir" />
				<isset property="openoffice.home" />
			</or>
		</condition>
		<condition property="download.build.skip">
			<or>
				<isset property="openoffice.archive.dir" />
				<isset property="openoffice.home" />
			</or>
		</condition>
		<condition property="install.build.skip">
			<or>
				<isset property="openoffice.home" />
                       	 	<not>
					<isset property="openoffice.archive.dir" />
				</not>
			</or>
		</condition>
	</target>

	<target name="find.build" unless="find.build.skip" description="Find the newest build on the remote server">
		<loadresource property="openoffice.build">
			<url url="${openoffice.build.url}" />
			<filterchain>
				<deletecharacters chars=" \t\r\n" />
			</filterchain>
		</loadresource>
		<echo>Latest build: ${openoffice.build}</echo>
	</target>

	<target name="download.build" unless="download.build.skip" description="Download the specified build from the remote server">
		<script language="javascript">
					  	value = project.getProperty("openoffice.archive.url");
					    resolvedValue = project.replaceProperties(value);
						project.setProperty("openoffice.archive.url", resolvedValue);
		</script>
		<echo>Archive address: ${openoffice.archive.url}</echo>
		<property name="openoffice.archive.dir" value="${testspace}/download/${openoffice.build}" />
		<mkdir dir="${openoffice.archive.dir}" />
		<get src="${openoffice.archive.url}" dest="${openoffice.archive.dir}" verbose="false" usetimestamp="true" skipexisting="true" />
	</target>

	<target name="install.build" unless="install.build.skip" description="Install the build to the local">
		<property name="openoffice.installation.dir" value="${testspace}/installation/${openoffice.build}" />
		<mkdir dir="${openoffice.installation.dir}" />
		<unzip dest="${openoffice.installation.dir}">
			<fileset dir="${openoffice.archive.dir}">
				<include name="**/Apache_OpenOffice*.zip" />
			</fileset>
		</unzip>
		<pathconvert property="gz.files" pathsep=" " setonempty="false">
			<path>
				<fileset dir="${openoffice.archive.dir}" includes="Apache_OpenOffice*.gz" />
			</path>
		</pathconvert>
		<exec dir="${openoffice.installation.dir}" executable="tar" failifexecutionfails="false">
			<arg line="-zxf ${gz.files}" />
		</exec>
		<pathconvert property="openoffice.bin" pathsep=" " setonempty="false">
			<path>
				<fileset dir="${openoffice.installation.dir}" includes="**/*/soffice.bin" followsymlinks="false" />
			</path>
		</pathconvert>
		<dirname property="openoffice.bin.parent" file="${openoffice.bin}" />
		<property name="openoffice.home" location="${openoffice.bin.parent}/../" />
		<fail unless="openoffice.home" />
		<echo>Openoffice is installed to ${openoffice.home}</echo>
	</target>

	<target name="run.test" depends="compile" description="Run junit">
		<tstamp>
			<format property="output.stamp" pattern="yyMMdd.hhmm" />
		</tstamp>

		<move file="${test.output}" tofile="${test.output}.${output.stamp}" failonerror="false" />
		<mkdir dir="${test.result}" />
		<mkdir dir="${test.report}" />
		<mkdir dir="${test.output}/temp" />
		
		<junit fork="yes" forkmode="once" tempdir="${test.output}/temp" printsummary="yes" showoutput="false" errorProperty="test.failed" failureProperty="test.failed" dir=".">
			<sysproperty key="openoffice.home" value="${openoffice.home}" />
			<sysproperty key="testspace" value="${testspace}" />
			<syspropertyset>
				<propertyref builtin="commandline" />
			</syspropertyset>
			<batchtest todir="${test.result}">
				<fileset dir="${classes}" includes="${test.classes}" />
			</batchtest>

			<formatter type="xml" />
			<classpath>
				<pathelement location="${classes}" />
				<path refid="junit.classpath"/>
				<path refid="uno.classpath"/>
			</classpath>
		</junit>
        <property file="${openoffice.home}/program/versionrc" prefix="openoffice"/>
        <property file="${openoffice.home}/program/version.ini" prefix="openoffice"/>
		<junitreport todir="${test.report}">
			<fileset dir="${test.result}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" styledir="${junit.style.dir}" todir="${test.report}">
				<param name="TITLE" expression="Test Build: AOO${openoffice.buildid}.r${openoffice.Revision}, OS: ${os.name}-${os.version}-${os.arch}"/>
			</report>
		</junitreport>
		<property name="test.report.index" location="${test.report}/index.html" />
		<echo>Open ${test.report.index} in browser to view the test report.</echo>
	</target>

	<target name="test" depends="check.build,find.build,download.build,install.build,run.test" description="Run testing on the specified build. The build is automatically downloaded and installed according to the context.">
		<fail message="Test Failed" if="test.failed" />
	</target>

	<target name="report.test" unless="report.test.skip" description="Upload the testing result to report repository.">
		<exec executable="hostname" outputproperty="host.name" />
		<property name="report.to" value="${openoffice.build}_${host.name}" />
		<!--
		<echo>Sending report to ${report.repos.server}/${report.repos.dir}/${report.to}</echo>
		<ftp server="${report.repos.server}" remotedir="${report.repos.dir}/${report.to}" userid="${report.repos.user}" password="${report.repos.password}" action="mkdir" />
		<ftp server="${report.repos.server}" remotedir="${report.repos.dir}/${report.to}" userid="${report.repos.user}" password="${report.repos.password}" depends="yes">
			<fileset dir="${test.output}">
			</fileset>
		</ftp>
		-->
		<echo>Uploading report to ${report.repos}/${report.to}</echo>
		<tempfile property="report.to.temp" suffix=".output" destDir="${testspace}" deleteonexit="true"/>
		<copy todir="${report.to.temp}/${report.to}">
			<fileset dir="${test.output}" />
		</copy>

		<scp todir="${report.repos}">
			<fileset dir="${report.to.temp}"/>
		</scp>
	</target>

	<target name="detect.build" depends="find.build" description="Check if new build is available. If no new build is available, the target will be failed.">
		<loadfile property="local.build" srcFile="${testspace}/build.txt" quiet="true" failonerror="false" />
		<fail message="The build has been tested! We don't want to test it twice.">
			<condition>
				<equals arg1="${openoffice.build}" arg2="${local.build}" trim="true" />
			</condition>
		</fail>
		<mkdir dir="${testspace}" />
		<echo file="${testspace}/build.txt">${openoffice.build}</echo>
	</target>

	<target name="routine.test" depends="detect.build,download.build,install.build,run.test,report.test" description="Periodically run testing.">
		<fail message="Test Failed" if="test.failed" />
	</target>
</project>
