--- misc/serf-1.0.0/buckets/ssl_buckets.c	2011-07-13 04:39:16.000000000 +0200
+++ misc/build/serf-1.0.0/buckets/ssl_buckets.c	2012-02-24 14:26:51.766979700 +0100
@@ -173,6 +173,9 @@
     serf_ssl_need_server_cert_t server_cert_callback;
     void *server_cert_userdata;
 
+    serf_ssl_need_server_cert_chain_t server_cert_chain_callback;
+    void *server_cert_chain_userdata;
+    
     const char *cert_path;
 
     X509 *cached_cert;
@@ -385,6 +388,25 @@
 #endif
 };
 
+/* Returns a NULL terminated list of Base64 encoded DER certificates. */
+static const char **export_certificates(STACK_OF(X509) *chain, 
+                                        apr_pool_t *pool)
+{
+    const char **certificates;
+    int i, depth;
+
+    depth = sk_X509_num(chain);
+    certificates = apr_pcalloc(pool, sizeof(*certificates) * (depth + 1));
+
+    for (i = 0; i < depth; ++i) {
+        serf_ssl_certificate_t cert;
+        cert.ssl_cert = sk_X509_value(chain, i);
+        *(certificates+i) = serf_ssl_cert_export(&cert, pool);
+    }
+     
+    return certificates;   
+}
+
 static int
 validate_server_certificate(int cert_valid, X509_STORE_CTX *store_ctx)
 {
@@ -457,6 +479,39 @@
         apr_pool_destroy(subpool);
     }
 
+    /* This provides the entire chain so we only call it when the end 
+     * entity certificate is reached. */
+    if (ctx->server_cert_chain_callback && depth == 0) {
+        apr_status_t status;
+        STACK_OF(X509) *chain;
+        const char **ascii_certs;
+        apr_pool_t *subpool;
+
+        apr_pool_create(&subpool, ctx->pool);
+ 
+        chain = X509_STORE_CTX_get1_chain(store_ctx);
+        /* Fallback to the current certificate if the chain cannot be 
+         * retrieved. */
+        if ( ! chain) {
+            chain = sk_X509_new_null();
+            sk_X509_push(chain, X509_dup(server_cert));
+        }
+        ascii_certs = export_certificates(chain, subpool); 
+
+        /* Callback for further verification. */
+        status = 
+            ctx->server_cert_chain_callback(ctx->server_cert_chain_userdata, 
+                                            failures, ascii_certs);
+        if (status == APR_SUCCESS)
+            cert_valid = 1;
+        else
+            /* Pass the error back to the caller through the context-run. */
+            ctx->pending_err = status;
+        
+        sk_X509_pop_free(chain, X509_free);
+        apr_pool_destroy(subpool);
+    }
+
     return cert_valid;
 }
 
@@ -1009,6 +1064,16 @@
     context->server_cert_userdata = data;
 }
 
+
+void serf_ssl_server_cert_chain_callback_set(
+    serf_ssl_context_t *context,
+    serf_ssl_need_server_cert_chain_t callback,
+    void *data)
+{
+    context->server_cert_chain_callback = callback;
+    context->server_cert_chain_userdata = data;
+}
+
 static serf_ssl_context_t *ssl_init_context(void)
 {
     serf_ssl_context_t *ssl_ctx;
--- misc/serf-1.0.0/serf_bucket_types.h	2011-06-25 18:01:01.000000000 +0200
+++ misc/build/serf-1.0.0/serf_bucket_types.h	2012-02-24 14:26:51.790981100 +0100
@@ -486,6 +486,11 @@
     int failures,
     const serf_ssl_certificate_t *cert);
 
+typedef apr_status_t (*serf_ssl_need_server_cert_chain_t)(
+    void *data,
+    int failures,
+    const char **certs);
+
 void serf_ssl_client_cert_provider_set(
     serf_ssl_context_t *context,
     serf_ssl_need_client_cert_t callback,
@@ -508,6 +513,16 @@
     void *data);
 
 /**
+ * Set a callback to override the default SSL server certificate validation
+ * algorithm. This callback is provided with the certificate chain of the 
+ * server.
+ */
+void serf_ssl_server_cert_chain_callback_set(
+    serf_ssl_context_t *context,
+    serf_ssl_need_server_cert_chain_t callback,
+    void *data);
+
+/**
  * Use the default root CA certificates as included with the OpenSSL library.
  */
 apr_status_t serf_ssl_use_default_certificates(
@@ -630,4 +645,4 @@
 }
 #endif
 
-#endif	/* !SERF_BUCKET_TYPES_H */
+#endif /* !SERF_BUCKET_TYPES_H */
--- misc/serf-1.0.0/test/serf_get.c	2011-06-25 18:01:01.000000000 +0200
+++ misc/build/serf-1.0.0/test/serf_get.c	2012-02-24 14:29:02.520458400 +0100
@@ -49,6 +49,21 @@
     return APR_SUCCESS;
 }
 
+static apr_status_t print_cert_chain(void *data, int failures,
+                                     const char **certs)
+{
+    const char *current;
+    while ((current = *certs) != NULL)
+    {   
+        printf("-----BEGIN CERTIFICATE-----\n");
+        printf("%s\n", current);
+        printf("-----END CERTIFICATE-----\n");
+        ++certs;
+    }    
+
+    return APR_SUCCESS;
+}
+
 static apr_status_t conn_setup(apr_socket_t *skt,
                                 serf_bucket_t **input_bkt,
                                 serf_bucket_t **output_bkt,
@@ -65,6 +80,7 @@
             ctx->ssl_ctx = serf_bucket_ssl_decrypt_context_get(c);
         }
         serf_ssl_server_cert_callback_set(ctx->ssl_ctx, ignore_all_cert_errors, NULL);
+        serf_ssl_server_cert_chain_callback_set(ctx->ssl_ctx, print_cert_chain, NULL);
         serf_ssl_set_hostname(ctx->ssl_ctx, ctx->hostinfo);
 
         *output_bkt = serf_bucket_ssl_encrypt_create(*output_bkt, ctx->ssl_ctx,
