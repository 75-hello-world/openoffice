/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

#ifndef SYSTEM_STL_HASHMAP
#define SYSTEM_STL_HASHMAP

#ifdef HAVE_STL_INCLUDE_PATH
	// TODO: use computed include file name
	#include_next <unordered_map>
#else // fall back to boost/tr1
	#include <boost/tr1/unordered_map.hpp>
	#undef TR1_NS
	#define TR1_NS std::tr1
#endif


#ifndef NO_STLPORT4_EMULATION

namespace std
{
#ifdef TR1_NS
using TR1_NS::hash;
using TR1_NS::unordered_map;
using TR1_NS::unordered_multimap;
#endif

template<
	typename K,
	typename T,
	typename H = hash<K>,
	typename E = equal_to<K>,
	typename A = allocator<pair<K,T> > >
class hash_map
:	public unordered_map<K,T,H,E,A>
{
public:
	typedef unordered_map<K,T,H,E,A> _super;
	typedef typename _super::mapped_type data_type;

	hash_map( void) {}
	hash_map( size_t n) : _super( n) {}
	hash_map& operator=( const hash_map& r) { hash_map t(r); _super::swap(t); return *this;} //####################

	void resize( size_t n) { _super::rehash(n); }
private:
	// setting the hasher dynamically is not supported in the emulation!
	hash_map( size_t, const H&, const E& rE=E(), const A& rA=A()); // not implemented
};

template<
	typename K,
	typename T,
	typename H = hash<K>,
	typename E = equal_to<K>,
	typename A = allocator<pair<K,T> > >
class hash_multimap
:	public unordered_multimap<K,T,H,E,A>
{
public:
	typedef unordered_multimap<K,T,H,E,A> _super;
	typedef typename _super::mapped_type data_type;

	hash_multimap( void) {}
	hash_multimap( size_t n) : _super( n) {}
	hash_multimap& operator=( const hash_multimap& r) { hash_multimap t(r); _super::swap(t); return *this;}//####################

	void resize( size_t n) { _super::rehash(n); }
private:
	// setting the hasher dynamically is not supported in the emulation!
	hash_multimap( size_t, const H&, const E& rE=E(), const A& rA=A()); // not implemented
};

} // namespace std

#endif // NO_STLPORT4_EMULATION

#endif

