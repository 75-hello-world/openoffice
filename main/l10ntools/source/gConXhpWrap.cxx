/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
#include "gConXhp.hxx"
#include <iostream>
#include <fstream>
#include <cstdlib>



/*****************************************************************************
 *********************   G C O N X H P W R A P . C X X   *********************
 *****************************************************************************
 * This includes the c code generated by flex
 *****************************************************************************/



/************   I N T E R F A C E   I M P L E M E N T A T I O N   ************/
convert_xhp::convert_xhp(l10nMem& crMemory)
                        : convert_gen_impl(crMemory),
                          mbCollectingData(false)
{
}



/************   I N T E R F A C E   I M P L E M E N T A T I O N   ************/
convert_xhp::~convert_xhp()
{
}



/**********************   I M P L E M E N T A T I O N   **********************/
namespace XhpWrap
{
#define IMPLptr convert_gen_impl::mcImpl
#define LOCptr ((convert_xhp *)convert_gen_impl::mcImpl)
#include "gConXhp_yy.c"
}


/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xhp::execute()
{
  XhpWrap::yylex();

  if (mbMergeMode)
    writeSourceFile(msCollector);
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xhp::startData(char *yytext)
{
  std::string sText = copySource(yytext);
  std::string sLang;
  int         nL, nE;


  // Only start if tag is not imidiatly closed !
  if (sText[sText.size()-2] == '/')
    return;

  // locate id, if any
  nL = sText.find("id=\"");
  if (nL == (int)std::string::npos)
    return;
  nE    = sText.find("\"", nL+4);
  msKey = sText.substr(nL+4, nE - nL-4);

  // locate oldref, if any
  nL = sText.find("oldref=\"");
  if (nL != (int)std::string::npos)
  {
    nE     = sText.find("\"", nL+8);
    msKey += "." + sText.substr(nL+8, nE - nL-8);
  }

  // locate lang, if any
  nL = sText.find("xml-lang=\"");
  if (nL == (int)std::string::npos)
    return;
  nE    = sText.find("\"", nL+10);
  sLang = sText.substr(nL+10, nE - nL-10);

  if (sLang != "en-US")
  {
    showError((char *)(sLang + " is no en-US language").c_str());
    return;
  }

  mbCollectingData = true;
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xhp::saveData(char *yytext)
{
  int nL;


  if (!mbCollectingData)
    return;

  for (;;)
  {
    nL = msCollector.find("\n");
    if (nL == (int)std::string::npos)
      break;
    msCollector.erase(nL,1);
  }
  for (nL = 0;; nL += 2)
  {
    nL = msCollector.find("<", nL);
    if (nL == (int)std::string::npos)
      break;
    msCollector.insert(nL, "\\");
  }
  for (nL = 0;; nL += 2)
  {
    nL = msCollector.find(">", nL);
    if (nL == (int)std::string::npos)
      break;
    msCollector.insert(nL, "\\");
  }
  for (nL = 0;; nL += 2)
  {
    nL = msCollector.find("\"", nL);
    if (nL == (int)std::string::npos)
      break;
    msCollector.insert(nL, "\\");
  }


  mcMemory.setEnUsKey(msKey, std::string("text"), msCollector);
  mbCollectingData = false;
  copySource(yytext);
}  
