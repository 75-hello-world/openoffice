/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
#include "gConXcs.hxx"
#include <iostream>
#include <fstream>
#include <cstdlib>



/*****************************************************************************
 *********************   G C O N X C S W R A P . C X X   *********************
 *****************************************************************************
 * This includes the c code generated by flex
 *****************************************************************************/



/************   I N T E R F A C E   I M P L E M E N T A T I O N   ************/
convert_xcs::convert_xcs(l10nMem& crMemory) : convert_gen_impl(crMemory) {}
convert_xcs::~convert_xcs()                                              {}



/**********************   I M P L E M E N T A T I O N   **********************/
namespace XcsWrap
{
#define IMPLptr convert_gen_impl::mcImpl
#define LOCptr ((convert_xcs *)convert_gen_impl::mcImpl)
#include "gConXcs_yy.c"
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcs::execute()
{
  // currently no .xcs files generate en-US translation, so stop trying
  XcsWrap::genxcs_lex();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcs::setKey(char *sCollectedText)
{
  int    nL;
  std::string sHead, myText(sCollectedText);

  if (mbMergeMode)
    writeSourceFile(msCollector+sCollectedText);
  msCollector.clear();

  // is it to be translated
  if (myText.find("oor:localized=") == std::string::npos)
	return;

  // locate key (is any)
  nL = myText.find("oor:name=\"");
  if (nL == (int)std::string::npos)
	return;
  sHead = myText.substr(nL+10);
  nL    = sHead.find("\"");
  msKey = sHead.substr(0,nL);
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcs::unsetKey(char *sText)
{
  std::string sCollectedText(sText);

  if (mbMergeMode)
    writeSourceFile(msCollector+sCollectedText);
  msCollector.clear();

  msKey.clear();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcs::startCollectData(char *sText)
{
  std::string sCollectedText(sText);


  if (mbMergeMode)
    writeSourceFile(msCollector);
  msCollector.clear();

  if (!msKey.size())
	return;
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcs::stopCollectData(char *sInpText)
{
  std::string sHead, sKey, sLang, sText, sCollectedText(sInpText);
  int    nL;


  // get type of tag
  msCollector += sCollectedText;
  nL = msCollector.find("<p");
  if (nL != (int)std::string::npos)
    sHead = msCollector.substr(nL+1, 1);
  else
  {
    nL = msCollector.find("<h");
    sHead = msCollector.substr(nL+1, 2);
  }

  // locate key and extract it
  nL    = msCollector.find("id=") +4;
  sKey  = msCollector.substr(nL, msCollector.find("\"", nL+1) - nL);
  nL    = msCollector.find("xml:lang=\"") + 10;
  sLang = msCollector.substr(nL, msCollector.find("\"", nL+1) - nL);
  nL    = msCollector.find(">") +1;
  sText = msCollector.substr(nL, msCollector.find("\"", nL+1) - nL);

  if (mbMergeMode)
  {
    // get all languages (includes en-US)
    std::vector<l10nMem_entry *>& cExtraLangauges = mcMemory.getLanguagesForKey(sKey);
    std::string                   sNewLine;
    nL = cExtraLangauges.size();

    writeSourceFile(msCollector);
    msCollector.clear();
    for (int i = 0; i < nL; ++i)
    {
      sNewLine = "\n<" + sHead + " id=\"" + sKey + "\"" + " xml:lang=\"" +
                 cExtraLangauges[i]->msLanguage + "\">" +
                 cExtraLangauges[i]->msText +
                 "</" + sHead + ">";

      writeSourceFile(sNewLine);
    }
  }
  else
    mcMemory.setEnUsKey(sKey, sText);

  mbCollectingData = false;
}  
