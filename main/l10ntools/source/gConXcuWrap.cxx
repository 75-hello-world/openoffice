/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
using namespace std;
#include "gConXcu.hxx"



/*****************************************************************************
 *********************   G C O N X C U W R A P . C X X   *********************
 *****************************************************************************
 * This includes the c code generated by flex
 *****************************************************************************/



/**********************   I M P L E M E N T A T I O N   **********************/
#include "gConXcu_yy.c"



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::runLex()
{
  genxcu_lex();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::pushKeyPart(TAG_TYPE bIsNode, string& sTag)
{
  string sKey, sHead;
  int    nL;


  // remember text for merge
  msCollector += sTag;

  // find key in tag
  nL = sTag.find("oor:name=\"");
  if (nL != string::npos)
    sHead = sTag.substr(nL+10);
  else
	return;

  // find end of key
  nL = sHead.find("\"");
  if (nL != string::npos)
    sKey = sHead.substr(0, nL);
  else
	return;

  xcu_stack_entry newTag(bIsNode, sKey);

  mcStack.push(newTag);
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::popKeyPart(TAG_TYPE bIsNode, string &sTag)
{
  // remember text for merge
  msCollector += sTag;

  // check for correct node/prop relations
  if (mcStack.size())
    mcStack.pop();

  if (mbMergeMode)
    writeSourceFile(msCollector);
  msCollector.clear();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::startCollectData(string& sCollectedText)
{
  if (mbMergeMode)
    writeSourceFile(msCollector);

  mbCollectingData = true;
  msCollector.clear();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::stopCollectData(string& sCollectedText)
{
  string useKey;

  // time to do something ?
  if (!mbCollectingData)
	return;
  mbCollectingData = false;

  // locate key and extract it
  while (mcStack.size())
  {
    xcu_stack_entry nowEntry = mcStack.top();
    mcStack.pop();
	useKey = nowEntry.msName + "." + useKey;
  }

  if (mbMergeMode)
  {
	writeSourceFile(msCollector + sCollectedText);

    // get all languages (includes en-US)
    vector<l10nMem_entry *>& cExtraLangauges = mcMemory.getLanguagesForKey(useKey);
    string                   sNewLine;
    int                      nL = cExtraLangauges.size();

    for (int i = 0; i < nL; ++i)
    {
      sNewLine = "<value xml:lang=\"" + cExtraLangauges[i]->msLanguage + "\">" +
	             cExtraLangauges[i]->msText + "</value>";
      writeSourceFile(sNewLine);
    }
  }
  else
    mcMemory.setEnUsKey(useKey, msCollector);

  msCollector.clear();
}  


/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::collectData(string& sCollectedText)
{
  msCollector += sCollectedText;
  if (sCollectedText == "\n")
  {
    if (mbMergeMode)
      writeSourceFile(msCollector);
    msCollector.clear();
  }
}
