/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
#include "gConXcu.hxx"



/*****************************************************************************
 *********************   G C O N X C U W R A P . C X X   *********************
 *****************************************************************************
 * This includes the c code generated by flex
 *****************************************************************************/



/**********************   I M P L E M E N T A T I O N   **********************/
namespace XcuWrap
{
#include "gConXcu_yy.c"
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::runLex()
{
  XcuWrap::genxcu_lex();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::pushKeyPart(TAG_TYPE bIsNode, std::string& sTag)
{
  std::string sKey;
  int    nL, nE;


  // write text for merge
  if (mbMergeMode)
    writeSourceFile(msCollector + sTag);
  msCollector.clear();

  // find key in tag
  nL = sTag.find("oor:name=\"");
  if (nL == (int)std::string::npos)
	return;

  // find end of key
  nL += 10;
  nE = sTag.find("\"", nL);
  if (nE == (int)std::string::npos)
	return;

  sKey = sTag.substr(nL, nE - nL);
  mcStack.push_back(sKey);
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::popKeyPart(TAG_TYPE bIsNode, std::string &sTag)
{
  // write text for merge
  if (mbMergeMode)
    writeSourceFile(msCollector + sTag);
  msCollector.clear();

  // check for correct node/prop relations
  if (mcStack.size())
    mcStack.pop_back();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::startCollectData(std::string& sCollectedText)
{
  if (mbMergeMode)
    writeSourceFile(msCollector+sCollectedText);
  msCollector.clear();

  mbCollectingData = true;
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::stopCollectData(std::string& sCollectedText)
{
  int    nL;
  std::string useKey;

  // time to do something ?
  if (!mbCollectingData)
	return;
  mbCollectingData = false;

  // locate key and extract it
  for (nL = 0; nL < (int)mcStack.size(); ++nL)
	useKey += (nL > 0 ? "." : "") + mcStack[nL];

  if (mbMergeMode)
  {
	writeSourceFile(msCollector + sCollectedText);

    // get all languages (includes en-US)
    std::vector<l10nMem_entry *>& cExtraLangauges = mcMemory.getLanguagesForKey(useKey);
    std::string                   sNewLine;
    nL = cExtraLangauges.size();

    for (int i = 0; i < nL; ++i)
    {
      sNewLine = "<value xml:lang=\"" + cExtraLangauges[i]->msLanguage + "\">" +
	             cExtraLangauges[i]->msText + "</value>";
      writeSourceFile(sNewLine);
    }
  }
  else
    mcMemory.setEnUsKey(useKey, msCollector);

  msCollector.clear();
}  


/**********************   I M P L E M E N T A T I O N   **********************/
void convert_xcu_impl::collectData(std::string& sCollectedText)
{
  msCollector += sCollectedText;
  if (sCollectedText == "\n")
  {
    if (mbMergeMode)
      writeSourceFile(msCollector);
    msCollector.clear();
  }
}
