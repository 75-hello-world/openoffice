/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
using namespace std;
#include "gConSrc.hxx"



/*****************************************************************************
 *********************   G C O N S R C W R A P . C X X   *********************
 *****************************************************************************
 * This includes the c code generated by flex
 *****************************************************************************/






/**********************   I M P L E M E N T A T I O N   **********************/
namespace SrcWrap
{
#include "gConSrc_yy.c"
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src_impl::runLex()
{
  SrcWrap::genSrc_lex();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src_impl::pushKey(string &sText)
{
  // write text for merge
  if (mbMergeMode)
    writeSourceFile(msCollector + sText);
  msCollector.clear();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src_impl::popKey(string &sText)
{
  // write text for merge
  if (mbMergeMode)
    writeSourceFile(msCollector + sText);
  msCollector.clear();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src_impl::pushNoKey(string &sText)
{
  // write text for merge
  if (mbMergeMode)
    writeSourceFile(msCollector + sText);
  msCollector.clear();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src_impl::registerPushKey(string &sText)
{
  // write text for merge
  if (mbMergeMode)
    writeSourceFile(msCollector + sText);
  msCollector.clear();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src_impl::pushRegistredKey(string &sText)
{
  // write text for merge
  if (mbMergeMode)
    writeSourceFile(msCollector + sText);
  msCollector.clear();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src_impl::saveData(string &sText)
{
  // write text for merge
  if (mbMergeMode)
    writeSourceFile(msCollector + sText);
  msCollector.clear();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src_impl::copyData(string &sText)
{
  msCollector += sText;
  if (sText == "\n")
  {
    if (mbMergeMode)
      writeSourceFile(msCollector);
    msCollector.clear();
  }
}
