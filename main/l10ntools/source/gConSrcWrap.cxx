/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/
#include "gConSrc.hxx"
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string.h>


/*****************************************************************************
 *********************   G C O N S R C W R A P . C X X   *********************
 *****************************************************************************
 * This includes the c code generated by flex
 *****************************************************************************/



/************   I N T E R F A C E   I M P L E M E N T A T I O N   ************/
convert_src::convert_src(l10nMem& crMemory)
	                    : convert_gen_impl(crMemory),
						  mbUseIdentifier(false),
	                      mbDoDefine(false)
{}
convert_src::~convert_src()
{}



/**********************   I M P L E M E N T A T I O N   **********************/
namespace SrcWrap
{
#define IMPLptr convert_gen_impl::mcImpl
#define LOCptr ((convert_src *)convert_gen_impl::mcImpl)
#include "gConSrc_yy.c"
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::execute()
{
  SrcWrap::genSrc_lex();
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::pushKey(char *syyText, int iLineno)
{
  std::string sKey, sText = copySource(syyText, iLineno);
  int         nL;

  // skip object type and isolate id
  isolateText(sText,  0, &nL, sKey);
  isolateText(sText, nL, &nL, sKey, true);

  mcStack.push_back(sKey);
  mbUseIdentifier = false;
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::popKey(char *syyText, int iLineno)
{
  copySource(syyText, iLineno);

  // check for correct node/prop relations
  if (mcStack.size())
    mcStack.pop_back();
  mbUseIdentifier = false;
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::pushNoKey(char *syyText, int iLineno)
{
  copySource(syyText, iLineno);

  mbUseIdentifier = true;
  mcStack.push_back("dummy");
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::pushPlaceHolder(char *syyText, int iLineno)
{
  copySource(syyText, iLineno);

  mbUseIdentifier = true;
  mcStack.push_back("dummy");
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::registerHelpKey(char *syyText, int iLineno)
{
  std::string sKey, sText = copySource(syyText, iLineno);
  int         nL;

  // do we expect a delayed key
  if (!mbUseIdentifier)
	return;

  // check if help is alone or before ident
  if (mcStack.back() != "dummy")
	return;

  // skip object type and isolate id
  isolateText(sText,  0, &nL, sKey);
  isolateText(sText, nL, &nL, sKey);

  // put key on stack instead of dummy
  mcStack.pop_back();
  mcStack.push_back(sKey);
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::registerIdentKey(char *syyText, int iLineno)
{
  std::string sKey, sText = copySource(syyText, iLineno);
  int         nL;

  // do we expect a delayed key
  if (!mbUseIdentifier)
	return;
  mbUseIdentifier = false;

  // skip object type and isolate id
  isolateText(sText,  0, &nL, sKey);
  isolateText(sText, nL, &nL, sKey);

  // put key on stack instead of dummy
  mcStack.pop_back();
  mcStack.push_back(sKey);
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::saveData(char *syyText, int iLineno)
{
  std::string sObj, sKey, sUseText, sText = copySource(syyText, iLineno);
  int         nL;

  // Is it a real text
  if (sText.find('\"') == std::string::npos)
	return;

  // locate key and extract it
  sKey.clear();
  for (nL = 0; nL < (int)mcStack.size(); ++nL)
	if (mcStack[nL] != "dummy")
	  sKey += (sKey.size() ? "." : "") + mcStack[nL];

  // skip object type and isolate id
  isolateText(sText,  0, &nL, sObj);
  nL = sText.find('\"', nL);
  isolateText(sText, nL, &nL, sUseText);

  if (mbMergeMode)
  {
    // get all languages (includes en-US)
    std::vector<l10nMem_entry *>& cExtraLangauges = mcMemory.getLanguagesForKey(sKey);
    std::string                   sNewLine;
    nL = cExtraLangauges.size();

    for (int i = 0; i < nL; ++i)
    {
      sNewLine = "<value xml:lang=\"" + cExtraLangauges[i]->msLanguage + "\">" +
	             cExtraLangauges[i]->msText + "</value>";
      writeSourceFile(sNewLine);
    }
  }
  else
    mcMemory.setEnUsKey(sKey, sObj, sUseText);
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::saveItemList(char *syyText, int iLineno)
{
  std::string sObj, sKey, sUseText, sText = copySource(syyText, iLineno);
  int         cnt, nL;

  // locate key and extract it
  sKey.clear();
  for (nL = 0; nL < (int)mcStack.size(); ++nL)
	if (mcStack[nL] != "dummy")
	  sKey += (sKey.size() ? "." : "") + mcStack[nL];

  // Locate object type
  isolateText(sText,  0, &nL, sObj);

  // loop and find all texts
  for (cnt = 0, nL = 0; nL < (int)sText.size();)
  {
    // Is it a real text
	nL = sText.find('\"', nL+1);
    if (nL == (int)std::string::npos)
      break;
    isolateText(sText, nL, &nL, sUseText);
	mcMemory.setEnUsKey(sKey, sObj, sUseText, ++cnt);
  }

  if (mbMergeMode)
  {
    // get all languages (includes en-US)
    std::vector<l10nMem_entry *>& cExtraLangauges = mcMemory.getLanguagesForKey(sKey);
    std::string                   sNewLine;
    nL = cExtraLangauges.size();

    for (int i = 0; i < nL; ++i)
    {
      sNewLine = "<value xml:lang=\"" + cExtraLangauges[i]->msLanguage + "\">" +
	             cExtraLangauges[i]->msText + "</value>";
      writeSourceFile(sNewLine);
    }
  }
}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::startDefine(char *syyText, int iLineno)
{
  std::string sKey, sText = copySource(syyText, iLineno);
  int         nL;

  // skip #define and get key
  isolateText(sText,  1, &nL, sKey);
  isolateText(sText,  nL, &nL, sKey);
  mbDoDefine = true;

  // put key on stack
  mcStack.push_back(sKey);

}



/**********************   I M P L E M E N T A T I O N   **********************/
void convert_src::collectData(char *syyText, int iLineno)
{
  int  nL;
  bool doMacro;

  msCollector += syyText;
  nL = msCollector.size()-1;
  if (msCollector[nL] == '\n')
  {
    doMacro = (nL > 1 && msCollector[nL -1] == '\\');
    if (mbMergeMode)
      writeSourceFile(msCollector);

  	msCollector.clear();

	// Time to stop macro
	if (doMacro)
	  return;

    // drop key and stop macro
    if (mbDoDefine)
    {
      mbDoDefine = false;
      mcStack.pop_back();
    }
  }
}
