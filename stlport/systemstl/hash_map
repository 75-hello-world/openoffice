/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

#ifndef SYSTEM_STL_HASHMAP
#define SYSTEM_STL_HASHMAP

#ifdef GCC

# include <functional>

# define _BACKWARD_BACKWARD_WARNING_H 1
# include <ext/hash_map>
# undef _BACKWARD_BACKWARD_WARNING_H

namespace __gnu_cxx
{
    template<> struct hash < std::string >
    {
        size_t operator()(const std::string & x) const
        {
            return hash< const char* >()(x.c_str());
        }
    };

    template<> struct hash< long long int >
    { 
        size_t operator()(long long int __x) const 
        { 
            return __x; 
        } 
    };

    template<> struct hash< unsigned long long int >
    { 
        size_t operator()(unsigned long long int __x) const 
        { 
            return __x; 
        } 
    };
}

namespace std
{
# ifndef __GXX_EXPERIMENTAL_CXX0X__
	using __gnu_cxx::hash;
# endif
	using __gnu_cxx::hash_map;
	using __gnu_cxx::hash_multimap;
}

#else
# error UNSUPPORTED COMPILER
#endif


#endif
/* vi:set tabstop=4 shiftwidth=4 expandtab: */
